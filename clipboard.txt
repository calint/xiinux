watch cat /proc/$(ps a|grep xiinux|head -n1|awk '{print $1}')/status

# watch open sockets count
XID=$(ps a|grep xiinux|head -n1|awk '{print $1}') watch -n 1 "lsof -a -p $XID -i | grep TCP | wc -l"

TAG=$(date "+%Y-%m-%d--%H-%M") && git tag $TAG && git push origin $TAG

git reset --hard HEAD

./test-coverage.sh | tee test-coverage.log

sudo tcpdump -A -i lo -n port 8088

sudo sysctl net.ipv4.ip_local_port_range='1024 65000'
sudo sysctl net.core.somaxconn=40000

# to allow more concurrent connections
sudo sysctl fs.file-max=70000

# allow connection flood
sudo sh -c "echo 0 >/proc/sys/net/ipv4/tcp_syncookies"
sudo sh -c 'echo 30000>/proc/sys/net/ipv4/tcp_max_syn_backlog'

# recycles connections after 5 seconds of wait mode
sudo sysctl net.ipv4.tcp_tw_reuse=1
sudo sysctl net.ipv4.tcp_fin_timeout=5

# increase maximum number of open files (relogin)
#vi /etc/security/limits.conf
#c                soft    nofile          20000
#c                hard    nofile          40000

hey -n 10000 -c 1 http://localhost:8088/qa/files/far_side_dog_ok.jpg


	static inline void urldecode(char*str){
		const char*p{str};
		while(*p){
			if(*p=='+'){
				*str++=' ';
				p++;
				continue;
			}
			char a,b;
			if(*p=='%'&&(a=p[1])&&(b=p[2])&&isxdigit(a)&&isxdigit(b)){
				if(a>='a')a-='a'-'A';
				if(a>='A')a-='A'-10;else a-='0';
				if(b>='a')b-='a'-'A';
				if(b>='A')b-='A'-10;else b-='0';
				*str++=16*a+b;
				p+=3;
				continue;
			}
			*str++=*p++;
		}
		*str='\0';
	}

To pause a pthread and wait for a notify from a different thread in Linux using C++, you can make use of condition variables. Condition variables are synchronization primitives that allow a thread to wait until it is notified by another thread.

Here's a general outline of how you can achieve this:

    Define a condition variable and a mutex that will be used to synchronize access to the shared variable and coordinate between threads.


pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t cond = PTHREAD_COND_INITIALIZER;


    In the thread that you want to pause:


    Acquire the mutex.
    Check a condition using a while loop. If the condition is not met, wait on the condition variable.
    When the condition is met, proceed with the desired task.
    Release the mutex.


pthread_mutex_lock(&mutex);
while (!condition) {
    pthread_cond_wait(&cond, &mutex);
}
// Perform the task when the condition is met
pthread_mutex_unlock(&mutex);


    In the other thread that will notify:


    Acquire the mutex.
    Update the shared variable or perform the necessary action.
    Signal or broadcast the condition variable to wake up the waiting thread.
    Release the mutex.


pthread_mutex_lock(&mutex);
// Update the shared variable or perform the necessary action
pthread_cond_signal(&cond); // or pthread_cond_broadcast(&cond) to wake up multiple threads
pthread_mutex_unlock(&mutex);


This way, the first thread will pause and wait until the condition is met and it receives a notification from the other thread.

Remember to properly handle error conditions and ensure that the mutex and condition variable are destroyed when they are no longer needed.

Note: The code provided is a general outline and may need to be adapted to your specific use case.

