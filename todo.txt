[ ] reply.http buffer_send=false
[ ] reply.http content_type
[ ] review reply
[ ] review doc. rename to cached
[ ] review args
[ ] consolidate sock.io_send, chunky.io_send and reply.send with a helper function
[ ] xprinter for sockets with buffered sends
[ ] sock: bind widget factories to paths
[ ] access path, query, headers, session from widget
[ ] decode query string on demand
[ ] examine why size of executable compiled by g++ grew from 51K to 61K
    when "template <unsigned M> inline strb &p(const strb<M> &sb)"
    was added to 'strb' and several instances with different sizes
    were created with 'strb' template
[ ] MIME type for ".js" files (warning in Firefox when absent)
[ ] multi-threaded clients, chunky pause and resume when write would block
[ ] ? headers in std::unordered_map
[ ] qa: gnuplot
[ ] hierarchial widgets
--------------------------------------------------------------------------------..
[x] review strb
[x] review chunky
[x] reduce packets count when sending files
    -> send MSG_NOSIGNAL | MSG_MORE
[x] chunky: sends too many small packets. sudo tcpdump -A -i lo -n port 8088
    -> send MSG_NOSIGNAL | MSG_MORE
[x] review messy args.hpp
    -> looks messy but it is simple
[x] qa: performance comparisons
[x] sock: move bulk of code to do_after_header()
[x] sock: upload overwrites buf
[x] review the messy ssize_t size_t ops in chunky.hpp
[x] format code with standard formatter
[x] change 'int n{1}' -> 'int n = 1'
[-] option for apache-bench compatibility
    -> use other benchmarking tool 'hey'
[x] append '_' to class members
[x] examine whether functions such as 'unsafe_*' get inlined although -Os
    -> using flag -Winline shows that 'unsafe_' not found. non-inlined functions seems ok.
[x] lut: delete without recursion
[x] qa: abuse
[x] change malloc to new where possible
[x] bug: sock::buf gets overwritten when content is sent thrashing the pointers
[-] ? chained requests: path, query string as std::string
    -> not supported
[x] sock: receive content -> use different buffer than the buffer used by request
[x] support for telnet with partial reads of the request
    -> chained request no longer supported
[-] if request line and headers must be read in one read then parsing that part
    of the request can be done in a simpler way
    -> multiple reads ber request
[x] valgrind
[x] abuse errors: request line length, header count, header name length, etc
    -> if total size of request (not including content) is larger than the buffer
       then exception
