[ ] hierarchial widgets ui framework
[ ]     js_stream: javascript stream escapes ' \n \r \0 (see bob class b.osjsstr)
[ ]     ltgt_stream: escapes < and > (see bob class b.osltgt)
[x]     ui::elem: non-recursive get_id()
[ ]     ui::root_widget: on_content: don't allocate string for full content
            handle partial id and partial value
[ ] map doc widget to path '/'
[ ] sock: consolidate recv(...) in content and buf
[ ] consolidate printing with xiinux::print_start_of_log_line(ip,session_id)
[ ] load save and sessions at xiinux start and stop
[ ] better handling of "accept: Too many open files"
[ ] server: socket time-out (man timerfd_create and clipboard.txt)
[ ] server: print_client_exception thread safe "localtime(...)"
[ ] review throws messages
[ ] review perror(...) messages
[ ] consider using format -> "Type const &" rather than "const Type &"
[ ] review/refactor args
[ ] decode query string on demand
[ ] websockets
[ ] metrics: widget '/qa/metrics' displaying metrics with counters and velocity gauges
    https://www.cssscript.com/canvas-based-html5-gauge-library-gauge-js/
[ ] multi-threading clients, chunky pause and resume when write would block
[ ] multi-threading file downloads
    (for nginx performance on multiple worker threads configuration)
[ ] xprinter for sockets with buffered sends
[ ] generate web/web.hpp
[ ] thdwatch and <threads> increases the binary by 15K. can be implemented without thread.
--------------------------------------------------------------------------------..
[x] server: sockopt TCP_FASTOPEN
    => how to confirm that it is working
    from https://www.keycdn.com/support/tcp-fast-open
    to check if it is enabled on the system:
        cat /proc/sys/net/ipv4/tcp_fastopen
        1: outgoing connections enabled
        2: incoming connections enabled
        3: both incoming and outgoing connections enabled
    to enable for client and server socket:
        echo "3" | sudo tee /proc/sys/net/ipv4/tcp_fastopen
    reboot will reset to default. to change that:
        echo "net.ipv4.tcp_fastopen=3" > /etc/sysctl.d/30-tcp_fastopen.conf
    
    to check:
        curl -v --tcp-fastopen http://localhost:8088
            then
        netstat -s | grep TCPF
            and look for:
        TCPFastOpenActive: x
        TCPFastOpenActiveFail: x
[x] consider using C++ std::filesystem
    => path and create_directories
[x] MIME type for ".js" files (warning in Firefox when absent)
[x] qa: upload file with space in name
[x] qa: upload empty file
[x] qa: request directory that does not contain default file
[x] sock: do_serve_file : build header using strb
[x] send_session_id_ at upload confirmation
[x] uploaded file to session directory
[x] ? C++ alternative to snprintf
    => using strb
[x] consider using strb instead of snprintf
    => strb and chunky uses snprintf to convert numbers to string
[x] qa: test_coverage of sock: resume_send_file
[x] qa: test_coverage of sock: io_request_write
[x] sock:do_serve_file parameter std::string_view to cont & for consistency
[x] coverage metrics
    => make.sh contains settings for that
       works with "coverage gutters" plug-in for visual code 
[x] upload.html send file modified time
[x] sock: upload handle content-type: file; [millis since January 1, 1970 (Unix timestamp)]
[x] /qa/: move coverage tests to own directory
[x] sock: do_serve_file: implicit file name for directory path
[x] uploaded file names are urlencoded
[x] sock: session id from cookie accessible in requests for file and upload
[-] consider uniform initialization using {...} instead of =
    =>
        auto upc = std::make_unique<sock>(client_fd, client_addr);
            and
        auto upc {std::make_unique<sock>(client_fd, client_addr)};
        generate same binary with the '=' being cleaner look
[x] examine why size of executable compiled by g++ grew from 51K to 61K
    when "template <unsigned M> inline strb &p(const strb<M> &sb)"
    was added to 'strb' and several instances with different sizes
    were created with 'strb' template
    => upsides of using C++ templates outweighs binary size 
[x] when server stops with open connections valgrind reports un-freed memory
    => unordered_map<int,std::unique_ptr<sock>>
[x] ? server: what to do about the raw pointer to sock
    unordered_map<int,std::unique_ptr<sock>> erased at close or exception
[x] 'map_session' in 'reply' is a raw pointer to a member of 'session' and may
    be dangling if 'session' is deleted by 'sessions' while a 'widget' is running.
    but 'session' can be owned by 'sessions' using 'unique_ptr' instead of 'shared_ptr'.
    life-time of 'sessions' is global so 'session' is valid till 'main' exits.
    same for 'widget' in 'sock'. 'widget' is valid till 'session' containing it is
    deleted which is at 'main' exit so a raw pointer is ok.
    => reverted to raw pointer to 'session' and 'widget' in 'sock'
[x] sock: make std::shared_ptr for session and widget
[x] clang-tidy
[x] consider "auto f() -> void" type of function declaration
[x] examine why using lut<...>, std::put_time(...) and std::cout increases the
    size of binary so much (~75K -> ~275K)
    => -g was on now ~75K -> ~130K
    => -Os enabled now ~76K
[x] ? lut<std::string_view>
    => deleted
[x] consider going full C++ using std::string, std::string_view and std::unordered_map<...>
    instead of lut<...>
    => ok
[x] using map_headers = std::unordered_map<std::string_view, std::string_view>;
[x] using map_session = std::unordered_map<std::string, std::string>;
[x] using map_widgets = std::unordered_map<std::string, std::unique_ptr<widget>>;
[x] using map_sessions = std::unordered_map<std::string, std::unique_ptr<session>>;
[x] using map_path_to_widget_factory = unordered_map<std::string key, ...>;
[x] sock: when sendfile returns 0 the file size has changed to less than current offset
    => throws
[x] lut: when to delete or delete[] key and data
[x] lut: overwrite does not delete old content
[x] ^C after running:
        curl -sH"Cookie: i=20230926--2020-abcdef" http://localhost:8088/qa/counter?a=1+2 > /dev/null
    generates:
        munmap_chunk(): invalid pointer
        Aborted (core dumped)
    => in web::counter.to(...) r.get_session()->put("x", "abc");
        then lut.delete_content(...) tries to delete const char* 
[x] qa: gnuplot
[x] access path, query, headers, session from widget
    -> access through 'reply'
[x] ? close all sockets in epoll when server::stop to release the port
    -> sockopt SO_REUSEADDR, SO_REUSEPORT set to 1
[x] server: retrieve client ip
[x] server: use accept4 when connecting client
[x] examine why "qa/far_side_dog_ok.jpg" performance lower than nginx when more than 1 client
    -> running nginx on 1 worker thread (config "worker_processes 1;") performs similar (lower)
[x] lut.hash(...) based on pointer address of key
    -> does not work because address might change although key is same
[x] chunky: consolidate flush() and send_chunk()
[x] chunky: when sending string larger than buffer do io_send, skipping copy to buffer
[x] epoll: register and handle client closes connection
[x] qa::page sending an empty string from the browser
[x] widget map to path using function pointers
[-] lut: return std::optional<const T&>
    -> effort failed in complexity
[x] examine if a const ref can be returned from lut to avoid copies of std::function
    -> done and implemented. unclear whether comparing a string twice is cheaper
       than copy a std::function
[x] sock: bind widget factories to paths
[x] review doc. rename to cached
[x] review reply
[x] examine if splicing can occur when doing:
    std::unique_ptr<chunky> y(/*take*/ r.reply_chunky("text/plain;charset=utf-8"));
    xprinter &x = *y;
    -> xprinter &x = *static_cast<xprinter *>(y.get()); is same but if known for supported
       that y is a xprinter then ok
[x] use c++ thread instead of pthread
[x] consolidate sock.io_send, chunky.io_send and reply.send with a helper function
[-] reply.http buffer_send=false
    -> reply.http needs to know the size of the content
[x] reply.http content_type
[x] review strb
[x] review chunky
[x] reduce packets count when sending files
    -> send MSG_NOSIGNAL | MSG_MORE
[x] chunky: sends too many small packets. sudo tcpdump -A -i lo -n port 8088
    -> send MSG_NOSIGNAL | MSG_MORE
[x] review messy args.hpp
    -> looks messy but it is simple
[x] qa: performance comparisons
[x] sock: move bulk of code to do_after_header()
[x] sock: upload overwrites buf
[x] review the messy ssize_t size_t ops in chunky.hpp
[x] format code with standard formatter
[x] change 'int n{1}' -> 'int n = 1'
[-] option for apache-bench compatibility
    -> use other benchmarking tool 'hey'
[x] append '_' to class members
[x] examine whether functions such as 'unsafe_*' get inlined although -Os
    -> using flag -Winline shows that 'unsafe_' not found. non-inlined functions seems ok.
[x] lut: delete without recursion
[x] qa: abuse
[x] change malloc to new where possible
[x] bug: sock::buf gets overwritten when content is sent thrashing the pointers
[-] ? chained requests: path, query string as std::string
    -> not supported
[x] sock: receive content -> use different buffer than the buffer used by request
[x] support for telnet with partial reads of the request
    -> chained request no longer supported
[-] if request line and headers must be read in one read then parsing that part
    of the request can be done in a simpler way
    -> multiple reads ber request
[x] valgrind
[x] abuse errors: request line length, header count, header name length, etc
    -> if total size of request (not including content) is larger than the buffer
       then exception
